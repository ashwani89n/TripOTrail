import React, { useState } from 'react';
import { APIProvider, Map, AdvancedMarker, InfoWindow } from '@vis.gl/react-google-maps';

const AttractionMap = () => {
  const [start, setStart] = useState('');
  const [end, setEnd] = useState('');
  const [attractions, setAttractions] = useState([]);
  const [selectedAttraction, setSelectedAttraction] = useState(null);
  const [mapCenter, setMapCenter] = useState({ lat: 0, lng: 0 });
  const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;

  const handleSearch = async () => {
    try {
      // Geocode start and end points
      const [startGeo, endGeo] = await Promise.all([
        fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(start)}&key=${apiKey}`),
        fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(end)}&key=${apiKey}`)
      ]);
      
      const [startData, endData] = await Promise.all([startGeo.json(), endGeo.json()]);
      const startLocation = startData.results[0].geometry.location;
      const endLocation = endData.results[0].geometry.location;

      // Calculate midpoint for search
      const midpoint = {
        lat: (startLocation.lat + endLocation.lat) / 2,
        lng: (startLocation.lng + endLocation.lng) / 2
      };
      setMapCenter(midpoint);

      // Find attractions near midpoint
      const placesResponse = await fetch(
        `https://maps.googleapis.com/maps/api/place/nearbysearch/json?` +
        `location=${midpoint.lat},${midpoint.lng}&radius=50000&` +
        `type=tourist_attraction&key=${apiKey}`
      );
      const placesData = await placesResponse.json();

      // Enrich with details and photos
      const enrichedAttractions = await Promise.all(
        placesData.results.map(async place => {
          const detailsResponse = await fetch(
            `https://maps.googleapis.com/maps/api/place/details/json?` +
            `place_id=${place.place_id}&` +
            `fields=name,formatted_address,rating,photos&key=${apiKey}`
          );
          const details = await detailsResponse.json();
          return {
            ...place,
            ...details.result,
            photoUrl: details.result.photos?.[0]?.photo_reference ?
              `https://maps.googleapis.com/maps/api/place/photo?` +
              `maxwidth=400&photo_reference=${details.result.photos[0].photo_reference}&key=${apiKey}` :
              null
          };
        })
      );

      setAttractions(enrichedAttractions);
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <></>
  );
};

// import React, {
//   useState,
//   useContext,
//   useRef,
//   useEffect,
//   useCallback,
// } from "react";
// import { tripContext } from "../context/useTripDataContext";
// import AlarmClock from "../images/AlarmClock.png";
// import Moneybox from "../images/MoneyBox.png";
// import DestinationPin from "../images/CabBackView.png";
// import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd";

// const MapJourney = ({ onClickNextPrev }) => {
//   const selectedAttraction = [
//     {
//       address: "",
//       image: "",
//       is_added: true,
//       latitude: 33.8227293,
//       longitude: -84.3717113,
//       name: "2450 Camellia Lane Northeast, Atlanta, GA, USA",
//       order_index: 1,
//       position: "start",
//     },
//     {
//       address: "425 Peachtree Hills Avenue Northeast #29b, Atlanta",
//       image:
//         "https://maps.googleapis.com/maps/api/place/js/PhotoService.GetPhoto?1sAeeoHcJMAgoSbkMzMQG3eKOmp44nIHcCVsDDiCia6jYWlVOIKFZ0OjGH95qWBDiRdU2hUriBmqyNyOf9euth-i0SI6hyAaPI7F_nk32lrnmBU7GMJZj-vTrIgfWToKr2mg_QkhePuByvVl8dN3Yr0TI1HFOg-0g-1oY_uNyDei5ClKsMvaqFYJ5rexBQdnuLr_nQGt6zrJYsIsZJ9KjtjjUo8vsGqyocc8p62kBs2NrSYCWN8nGM499dqfE8tMILJdWcg0Tv8UkcuslSxnRQEq1Ucl2i4Ohboba3H59Tgg5uUzjySnTpWdKHTKpKGy6sXuzIvipN0OYy57E&3u400&5m1&2e1&callback=none&r_url=http%3A%2F%2Flocalhost%3A5173%2Fplan&key=AIzaSyA3xEs87Yqi3PpC8YKGhztvrXNDJX5nNDw&token=77989",
//       is_added: true,
//       latitude: 33.8168204,
//       longitude: -84.3756841,
//       name: "LumiÃ¨re",
//       order_index: 2,
//       position: "between",
//     },
//     {
//       address: "2115 Piedmont Road Northeast, Atlanta",
//       image:
//         "https://maps.googleapis.com/maps/api/place/js/PhotoService.GetPhoto?1sAeeoHcIFuKjKKeCBLoPFeZTlvF_9UrwIeKeLIo19oLvv2vv5zSbEGMOfK4MblHFOr1kCy6GL5kusSK6B46M8AWqhZiLlmPf855FUAe0LZsfokFYk--kh6tngkHjXZSTsVsArwM7BD8R7uOfc5t8jwroqQwCkkr_OA3rd11qQKMyJnoK88VMke3P4eWmupSNG_8NYUGhB31XxOTInYY4wcKNN9dDUo3wwkrkWjkhe12LL-w46RQ9dgNDt6nvw0pfSTgXTtOnPQbfbKO6qDct2wQkOareoiRAHoq44w1o8LOY_8sc6aQF7wFn5btBGTLnKRgqMFyd9PgmVZtfGZy50KpaeBYe-yVfDdF9V0qEMjtkq-K2GJDaKxZ8NRCHJlIKBC8SeFAoFEav_WOoW5s6dZTJmS_FfwEVhiHFDjLD-2cHFa9WiGcAgFlyH6IWYbDKAqJwhmBRhyS69qiR7QJ4ez5hQfEOmPZa9WvKVdoX1fmOQ15XhofJlxpH3pkn3F-XfjntWiLlkM3oDCKEXyxQCyIqZIswWR_ClmewGl-O1gg1gPP4U8a6lR36acpl56nL8G1z1nVUHEgSAr5O_XE0zNXVu4oTNXcb0kMHsSdohs_sEYVVWVHwa_F8dnJG5UiKjrXS6_2fm5w&3u400&5m1&2e1&callback=none&r_url=http%3A%2F%2Flocalhost%3A5173%2Fplan&key=AIzaSyA3xEs87Yqi3PpC8YKGhztvrXNDJX5nNDw&token=120123",
//       is_added: true,
//       latitude: 33.8127915,
//       longitude: -84.3657056,
//       name: "Gurl Mobb Museum",
//       order_index: 3,
//       position: "between",
//     },
//     {
//       address: "",
//       image: "",
//       is_added: true,
//       latitude: 33.8236359,
//       longitude: -84.37147019999999,
//       name: "2470 Camellia Lane Northeast, Atlanta, GA, USA",
//       order_index: 4,
//       position: "end",
//     },
//   ];

//   const [error, setError] = useState("");
//   const {
//     tripId,
//     destinationPoint,
//     startPoint,
//     startCoordinates,
//     destinationCoordinates,
//   } = useContext(tripContext);

//   const startDt = "Tue Apr 08 2025 12:56:10 GMT-0400 (Eastern Daylight Time)";
//   const endDt = "Tue Apr 09 2025 12:56:10 GMT-0400 (Eastern Daylight Time)";

//   const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = useState(false);
//   const mapRef = useRef(null);
//   const directionsServiceRef = useRef(null);
//   const directionsRendererRef = useRef(null);
//   const formatDate = (date) => {
//     const day = date.getDate();
//     const month = date.toLocaleString("en-US", { month: "long" });
//     const year = date.getFullYear();

//     const getDaySuffix = (day) => {
//       if (day > 3 && day < 21) return "th";
//       switch (day % 10) {
//         case 1:
//           return "st";
//         case 2:
//           return "nd";
//         case 3:
//           return "rd";
//         default:
//           return "th";
//       }
//     };

//     return `${day}${getDaySuffix(day)} ${month}, ${year}`;
//   };

//   const calculateTripDays = (startDt, endDt) => {
//     const startDate = new Date(startDt);
//     const endDate = new Date(endDt);
//     const daysCt = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;

//     const dayOneWeekday = startDate.toLocaleString("en-US", {
//       weekday: "long",
//     });

//     return {
//       daysCount: daysCt,
//       dayOneWeekday: dayOneWeekday,
//       formattedDate: formatDate(startDate),
//     };
//   };

//   const { daysCount, dayOneWeekday, formattedDate } = calculateTripDays(
//     startDt,
//     endDt
//   );

//   const [dayMap, setDayMap] = useState(() => {
//     const map = {};
//     for (let i = 1; i <= daysCount; i++) {
//       map[i] = [];
//     }
//     map[1] = selectedAttraction.filter((a) => a.position === "between");
//     return map;
//   });

//   const handlePrevious = () => {
//     onClickNextPrev((prev) => prev - 1);
//   };

//   const handleNext = () => {
//     // onClickNextPrev((prev) => prev + 1);
//   };

//   const onDragEnd = (result) => {
//     const { source, destination } = result;
  
//     if (!destination) return;
  
//     const sourceDay = parseInt(source.droppableId);
//     const destDay = parseInt(destination.droppableId);
  
//     const sourceList = Array.from(dayMap[sourceDay]);
//     const destList = Array.from(dayMap[destDay]);

//     // Prevent removing the last item from Day 1
//   if (sourceDay === 1 && sourceList.length === 1 && sourceDay !== destDay) {
//     return; // Disallow moving the last item out of Day 1
//   }
  
//     const [movedItem] = sourceList.splice(source.index, 1);
  
//     if (sourceDay === destDay) {
//       sourceList.splice(destination.index, 0, movedItem);
  
//       setDayMap((prev) => ({
//         ...prev,
//         [sourceDay]: sourceList,
//       }));
//     } else {
//       destList.splice(destination.index, 0, movedItem);
  
//       setDayMap((prev) => ({
//         ...prev,
//         [sourceDay]: sourceList,
//         [destDay]: destList,
//       }));
//     }
//   };
  

  
  

//   // Initialize and render the Google Map
//   useEffect(() => {
//     let mapInstance = null;

//     const initializeMap = () => {
//       if (window.google && mapRef.current && !mapInstance) {
//         mapInstance = new window.google.maps.Map(mapRef.current, {
//           zoom: 13,
//           center: {
//             lat: selectedAttraction[0].latitude,
//             lng: selectedAttraction[0].longitude,
//           },
//           mapId: "DEMO_MAP_ID",
//         });

//         // Create markers
//         directionsServiceRef.current =
//           new window.google.maps.DirectionsService();
//         directionsRendererRef.current =
//           new window.google.maps.DirectionsRenderer({
//             suppressMarkers: true,
//           });
//         directionsRendererRef.current.setMap(mapInstance);

//         // Add markers once
//         selectedAttraction.forEach((place) => {
//           const markerContent = document.createElement("div");
//           const markerIcon = document.createElement("img");
//           markerIcon.src = DestinationPin; // Use your custom pin
//           markerIcon.alt = `Attraction ${place.order_index}`;
//           markerIcon.style.width = "40px";
//           markerIcon.style.height = "40px";
//           markerContent.appendChild(markerIcon);

//           const indexLabel = document.createElement("span");
//           indexLabel.textContent = place.order_index;
//           indexLabel.style.position = "absolute";
//           indexLabel.style.top = "16px";
//           indexLabel.style.left = "50%";
//           indexLabel.style.transform = "translateX(-50%)";
//           indexLabel.style.fontSize = "10px";
//           indexLabel.style.color = "white";
//           indexLabel.style.fontWeight = "bold";
//           markerContent.appendChild(indexLabel);

//           new window.google.maps.marker.AdvancedMarkerElement({
//             position: { lat: place.latitude, lng: place.longitude },
//             map: mapInstance,
//             content: markerContent,
//             title: `Attraction ${place.order_index}`,
//           });
//         });
//       }
//     };

//     if (!isGoogleMapsLoaded) {
//       const interval = setInterval(() => {
//         if (window.google && mapRef.current) {
//           setIsGoogleMapsLoaded(true);
//           initializeMap();
//           clearInterval(interval);
//         }
//       }, 200);

//       return () => clearInterval(interval); // Cleanup
//     } else if (mapRef.current) {
//       initializeMap();
//     }
//   }, [isGoogleMapsLoaded, selectedAttraction]);

//   const calculateDirections = useCallback(() => {
//     if (
//       !isGoogleMapsLoaded ||
//       !directionsServiceRef.current ||
//       !directionsRendererRef.current ||
//       !selectedAttraction ||
//       selectedAttraction.length === 0
//     ) {
//       return;
//     }

//     try {
//       // Find start and end points based on position
//       const startPointData = selectedAttraction.find(
//         (p) => p.position === "start"
//       );
//       const endPointData = selectedAttraction.find((p) => p.position === "end");

//       // Check if start and end points are valid
//       if (!startPointData || !endPointData) {
//         console.error("Invalid start or end point data");
//         setError(
//           "Invalid start or end point data. Please ensure data is correct."
//         );
//         return;
//       }

//       const origin = {
//         lat: startPointData.latitude,
//         lng: startPointData.longitude,
//       };
//       const destination = {
//         lat: endPointData.latitude,
//         lng: endPointData.longitude,
//       };

//       // Map waypoints data correctly
//       const waypoints = selectedAttraction
//         .filter((p) => p.position === "between")
//         .sort((a, b) => a.order_index - b.order_index)
//         .map((place) => ({
//           location: { lat: place.latitude, lng: place.longitude },
//           stopover: true,
//         }));

//       // Make the directions request
//       directionsServiceRef.current.route(
//         {
//           origin,
//           destination,
//           waypoints,
//           travelMode: window.google.maps.TravelMode.DRIVING,
//         },
//         (result, status) => {
//           if (status === "OK") {
//             // Display the route
//             directionsRendererRef.current.setDirections(result);
//           } else {
//             console.error("Directions request failed due to " + status);
//             setError(
//               "Directions request failed. Please check your data and try again."
//             );
//           }
//         }
//       );
//     } catch (error) {
//       console.error("Error calculating directions:", error);
//       setError(
//         "Failed to calculate directions. Please check your start, end, and waypoint data."
//       );
//     }
//   }, [isGoogleMapsLoaded, selectedAttraction]);

//   useEffect(() => {
//     calculateDirections();
//   }, [calculateDirections, isGoogleMapsLoaded, selectedAttraction]);
//   return (
//     <div>
//       <div>
//         <div className="text-center mt-10 mb-16">
//           <h3 className="text-topHeader text-2xl font-kaushan">
//             {" "}
//             <span className="text-white font-aboreto font-semibold">
//               MAP
//             </span>{" "}
//             Your Journey
//           </h3>
//           <p className="text-subTitle font-inria text-lg mt-1">
//             Tie it all together in a perfect timeline and get ready to hit the
//             road!
//           </p>
//         </div>
//       </div>
//       {error && (
//         <div className="flex bg-topHeader mx-10 rounded-md mb-10 justify-center items-center">
//           <p className="p-2 text-white font-normal text-lg font-inria">
//             {error}
//           </p>
//         </div>
//       )}
//       <div className="flex flex-col md:flex-row justify-center items-start gap-4 p-5 mb--10">
//         <div className="w-full lg:w-1/2 bg-card p-3 rounded-l">
//           <div className="h-[580px] overflow-y-auto custom-scrollbar">
//             <DragDropContext onDragEnd={onDragEnd}>
//   <div className="grid grid-cols-1 gap-4">
//     {Array.from({ length: daysCount }, (_, i) => i + 1).map((day) => (
//       <Droppable key={day} droppableId={day.toString()}>
//         {(provided, snapshot) => (
//           <div
//             ref={provided.innerRef}
//             {...provided.droppableProps}
//             className={`bg-darkBG p-4 rounded shadow-md rounded-lg ${
//               snapshot.isDraggingOver ? "bg-blue-100" : ""
//             }`}
//           >
//             {/* <h2 className="text-lg mb-2 text-white">Day {day}</h2> */}
//             <div className="text-white mx-5 my-5">
//               <p className="text-white text-xl font-aldrich">
//                 Day {day} - {daysCount}
//                 <span className="font-light text-textCard text-[20px]">
//                   {" "}
//                   |{" "}
//                 </span>
//                 <span className="text-topHeader font-semibold">
//                   {dayOneWeekday}
//                 </span>
//               </p>
//               <p className="text-textCard text-md font-light">
//                 {formattedDate}
//               </p>
//             </div>
//             <ul className="space-y-3">
//               {dayMap[day]?.map((item, index) => (
//                 <Draggable key={item.name} draggableId={item.name} index={index}>
//                   {(provided) => (
//                     <li
//                       ref={provided.innerRef}
//                       {...provided.draggableProps}
//                       {...provided.dragHandleProps}
//                       className="flex flex-row gap-2"
//                     >
//                       <div className="bg-list p-3 rounded-lg w-[55%] text-sm justify-between flex flex-row">
//                         <div className="flex flex-row gap-2 justify-between">
//                           <img
//                             className="w-[35px] h-[26px]"
//                             src={item.image}
//                             alt=""
//                           />
//                           <span className="truncate mr-4 text-textCard italic">
//                             {item.name}
//                           </span>
//                         </div>
//                         <label className="relative inline-flex items-center cursor-pointer">
//                           <input
//                             type="checkbox"
//                             className="sr-only peer"
//                             checked={item.is_added}
//                             onChange={() => {
//                               // toggle checkbox logic here
//                             }}
//                           />
//                           <div className="w-8 h-3 bg-textCard peer-focus:outline-none peer-focus:ring-1 peer-focus:ring-topHeader rounded-full peer-checked:bg-topHeader transition-colors"></div>
//                           <div className="absolute left-[2px] h-3 w-3 bg-white rounded-full transition-transform duration-200 peer-checked:translate-x-[1.5rem]"></div>
//                         </label>
//                       </div>

//                       <div className="bg-list rounded-lg w-[32%] text-sm flex flex-row justify-between items-center p-2 text-textCard">
//                         <img src={AlarmClock} className="w-8 h-6" alt="" />
//                         <div className="flex items-center gap-2">
//                           <input
//                             type="text"
//                             className="bg-textCardDark rounded-lg px-2 w-10 h-7"
//                             maxLength={2}
//                             placeholder="HH"
//                           />
//                           :
//                           <input
//                             type="text"
//                             className="bg-textCardDark rounded-lg w-10 h-7 px-2"
//                             maxLength={2}
//                             placeholder="MM"
//                           />
//                           Hrs
//                         </div>
//                       </div>
//                       <div className="bg-list rounded-lg w-[18%] text-sm flex flex-row justify-between items-center p-2 text-textCard">
//                         <img
//                           src={Moneybox}
//                           className="w-8 h-6"
//                           alt=""
//                         />
//                         <div className="flex items-center">
//                             ${" "}
//                           <input
//                             type="text"
//                             className="bg-textCardDark rounded-lg w-12 h-7 px-2"
//                             maxLength={4}
//                           />
//                         </div>
//                       </div>
//                     </li>
//                   )}
//                 </Draggable>
//               ))}
//               {provided.placeholder}
//             </ul>
//           </div>
//         )}
//       </Droppable>
//     ))}
//   </div>
// </DragDropContext>


//           </div>
//         </div>
//         <div className="w-full lg:w-1/2 bg-card p-3 rounded-r">
//           <div ref={mapRef} className="w-full h-[580px]" id="map"></div>
//         </div>
//       </div>
//       {selectedAttraction && selectedAttraction.length !== 0 && (
//         <div className="flex justify-between mx-10 mt-5">
//           <button onClick={handlePrevious} className="prevBut">
//             Previous
//           </button>
//           <button onClick={handleNext} className="nextBut">
//             Next
//           </button>
//         </div>
//       )}
//     </div>
//   );
// };

// export default MapJourney;



